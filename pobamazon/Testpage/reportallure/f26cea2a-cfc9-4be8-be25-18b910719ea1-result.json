{"name": "test_validating_search_details_[shivaiahgarivikasgoud@gmail.com-Vikas786@-samsung s22 ultra-Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in-Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in-Amazon.in : samsung s22 ultra-Select a Payment Method - Amazon.in Checkout]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@type='password']\"}\n  (Session info: chrome=121.0.6167.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x564ab659cd93 <unknown>\n#1 0x564ab6280337 <unknown>\n#2 0x564ab62cbd60 <unknown>\n#3 0x564ab62cbe51 <unknown>\n#4 0x564ab630fbc4 <unknown>\n#5 0x564ab62ee46d <unknown>\n#6 0x564ab630d12d <unknown>\n#7 0x564ab62ee1e3 <unknown>\n#8 0x564ab62be135 <unknown>\n#9 0x564ab62bf13e <unknown>\n#10 0x564ab6560e4b <unknown>\n#11 0x564ab6564dfa <unknown>\n#12 0x564ab654d6d5 <unknown>\n#13 0x564ab6565a6f <unknown>\n#14 0x564ab653169f <unknown>\n#15 0x564ab658a098 <unknown>\n#16 0x564ab658a262 <unknown>\n#17 0x564ab659bf34 <unknown>\n#18 0x7f884c494ac3 <unknown>", "trace": "driver_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"592ac6a39b5bc42f60e1caeef3217cdd\")>\nusername = 'shivaiahgarivikasgoud@gmail.com', password = 'Vikas786@', productName = 'samsung s22 ultra'\nexpected1 = 'Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in'\nexpected2 = 'Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in'\nexpected3 = 'Amazon.in : samsung s22 ultra', expected4 = 'Select a Payment Method - Amazon.in Checkout'\n\n    @pytest.mark.parametrize(\"username, password,productName,expected1,expected2,expected3,expected4\",\n                             [(\"shivaiahgarivikasgoud@gmail.com\", \"Vikas786@\", \"samsung s22 ultra\", Content.tit,\n                               Content.product_search_title, Content.product_search_title, Content.payment_page_title),\n                              (\"shivaiahgarivikasgoud@gmail.com\", \"Vikas786@\", \"samsung s22 ultra\", Content.tit,\n                               Content.tit, Content.product_search_title, Content.payment_page_title)\n                              ])\n    # @pytest.mark.xfail\n    def test_validating_search_details_(driver_setup, username, password, productName, expected1, expected2, expected3,\n                                        expected4):\n        driver = driver_setup\n        login = searchPage(driver)\n        driver.get(\"https://www.amazon.in/\")\n>       login.account_singnin(username, password)\n\ntest_validating_search_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../pages/searchpage.py:25: in account_singnin\n    self.driver.find_element(*self.password_input_locator).send_keys(password)\n../../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7088896a70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x564ab658a262 \\\\u003Cunknown>\\\\n#17 0x564ab659bf34 \\\\u003Cunknown>\\\\n#18 0x7f884c494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//input[@type='password']\"}\nE         (Session info: chrome=121.0.6167.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x564ab659cd93 <unknown>\nE       #1 0x564ab6280337 <unknown>\nE       #2 0x564ab62cbd60 <unknown>\nE       #3 0x564ab62cbe51 <unknown>\nE       #4 0x564ab630fbc4 <unknown>\nE       #5 0x564ab62ee46d <unknown>\nE       #6 0x564ab630d12d <unknown>\nE       #7 0x564ab62ee1e3 <unknown>\nE       #8 0x564ab62be135 <unknown>\nE       #9 0x564ab62bf13e <unknown>\nE       #10 0x564ab6560e4b <unknown>\nE       #11 0x564ab6564dfa <unknown>\nE       #12 0x564ab654d6d5 <unknown>\nE       #13 0x564ab6565a6f <unknown>\nE       #14 0x564ab653169f <unknown>\nE       #15 0x564ab658a098 <unknown>\nE       #16 0x564ab658a262 <unknown>\nE       #17 0x564ab659bf34 <unknown>\nE       #18 0x7f884c494ac3 <unknown>\n\n../../.venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException"}, "parameters": [{"name": "username", "value": "'shivaiahgarivikasgoud@gmail.com'"}, {"name": "password", "value": "'Vikas786@'"}, {"name": "productName", "value": "'samsung s22 ultra'"}, {"name": "expected1", "value": "'Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in'"}, {"name": "expected2", "value": "'Online Shopping site in India: Shop Online for Mobiles, Books, Watches, Shoes and More - Amazon.in'"}, {"name": "expected3", "value": "'Amazon.in : samsung s22 ultra'"}, {"name": "expected4", "value": "'Select a Payment Method - Amazon.in Checkout'"}], "start": 1707709202931, "stop": 1707709411490, "uuid": "1f878234-4f3e-480e-bf69-ac0f64a7a82f", "historyId": "b1956f3066861f29c2315399d0bd43d1", "testCaseId": "842599ee1fda0b2558a00fe89981ac29", "fullName": "test_validating_search_page#test_validating_search_details_", "labels": [{"name": "suite", "value": "test_validating_search_page"}, {"name": "host", "value": "vikas-Mi-NoteBook-Pro"}, {"name": "thread", "value": "3866-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_validating_search_page"}]}